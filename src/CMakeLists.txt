include(CheckCXXCompilerFlag)
set(CXX_BASIC_FLAGS)

set(ASAN_UBSAN OFF)
if(ASAN_UBSAN)
    list(APPEND CXX_BASIC_FLAGS "-g")
    set(ASAN_UBSAN_FLAGS "-fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -fsanitize-recover=address")
    set(CMAKE_REQUIRED_FLAGS ${ASAN_UBSAN_FLAGS})
    check_cxx_compiler_flag(${ASAN_UBSAN_FLAGS} asan_ubsan_works)
    unset(CMAKE_REQUIRED_FLAGS)

    if(asan_ubsan_works)
        string(REPLACE " " ";" _asan_ubsan_flags ${ASAN_UBSAN_FLAGS})
        add_executable(echo_bot main.cpp updates_receiver.h updates_receiver.cpp logger.h logger.cpp ini_reader.h ini_reader.cpp threadsafe_queue.h threadsafe_queue.cpp updates_processor.h updates_processor.cpp session.h session.cpp settings_structs.h settings_structs.cpp)
        target_compile_options(echo_bot PUBLIC ${CXX_BASIC_FLAGS} ${_asan_ubsan_flags})
        target_link_libraries(echo_bot "-lcrypto" "-lssl" ${Boost_LOG_SETUP_LIBRARY} ${Boost_LOG_LIBRARY} ${_asan_ubsan_flags})
    endif()
endif()

set(TSAN OFF)
if(TSAN)
    list(APPEND CXX_BASIC_FLAGS "-g")
    set(TSAN_FLAGS "-fsanitize=thread -fno-omit-frame-pointer -fPIE")
    set(CMAKE_REQUIRED_FLAGS ${TSAN_FLAGS})
    check_cxx_compiler_flag(${TSAN_FLAGS} tsan_works)
    unset(CMAKE_REQUIRED_FLAGS)

    if(tsan_works)
        find_package(Threads REQUIRED)
        string(REPLACE " " ";" _tsan_flags ${TSAN_FLAGS})
        add_executable(echo_bot main.cpp updates_receiver.h updates_receiver.cpp logger.h logger.cpp ini_reader.h ini_reader.cpp threadsafe_queue.h threadsafe_queue.cpp updates_processor.h updates_processor.cpp session.h session.cpp settings_structs.h settings_structs.cpp)
        target_compile_options(echo_bot PUBLIC ${CXX_BASIC_FLAGS} ${_tsan_flags})
        target_link_libraries(echo_bot "-lcrypto" "-lssl" ${Boost_LOG_SETUP_LIBRARY} ${Boost_LOG_LIBRARY} Threads::Threads ${_tsan_flags} -pie)
    endif()
endif()

set(NO_SAN ON)
if(NO_SAN)
    add_executable(echo_bot main.cpp updates_receiver.h updates_receiver.cpp logger.h logger.cpp threadsafe_queue.h threadsafe_queue.cpp updates_processor.h updates_processor.cpp session.h session.cpp callbacks.h callbacks.cpp base64.h)
    add_subdirectory(ini_reader)
    add_subdirectory(external_program_callers)
    target_link_libraries(echo_bot "-lcrypto" "-lssl" ${Boost_LOG_SETUP_LIBRARY} ${Boost_LOG_LIBRARY} ini_reader external_program_callers)
endif()
